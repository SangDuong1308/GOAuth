// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: gokit_public.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	GoKitPublic_SayHello_FullMethodName = "/proto.GoKitPublic/SayHello"
	GoKitPublic_Auth_FullMethodName     = "/proto.GoKitPublic/Auth"
)

// GoKitPublicClient is the client API for GoKitPublic service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Here is the overall greeting service definition where we define all our endpoints
type GoKitPublicClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	Auth(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
}

type goKitPublicClient struct {
	cc grpc.ClientConnInterface
}

func NewGoKitPublicClient(cc grpc.ClientConnInterface) GoKitPublicClient {
	return &goKitPublicClient{cc}
}

func (c *goKitPublicClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, GoKitPublic_SayHello_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goKitPublicClient) Auth(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, GoKitPublic_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoKitPublicServer is the server API for GoKitPublic service.
// All implementations should embed UnimplementedGoKitPublicServer
// for forward compatibility
//
// Here is the overall greeting service definition where we define all our endpoints
type GoKitPublicServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	Auth(context.Context, *LoginRequest) (*LoginResponse, error)
}

// UnimplementedGoKitPublicServer should be embedded to have forward compatible implementations.
type UnimplementedGoKitPublicServer struct {
}

func (UnimplementedGoKitPublicServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedGoKitPublicServer) Auth(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}

// UnsafeGoKitPublicServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoKitPublicServer will
// result in compilation errors.
type UnsafeGoKitPublicServer interface {
	mustEmbedUnimplementedGoKitPublicServer()
}

func RegisterGoKitPublicServer(s grpc.ServiceRegistrar, srv GoKitPublicServer) {
	s.RegisterService(&GoKitPublic_ServiceDesc, srv)
}

func _GoKitPublic_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKitPublicServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKitPublic_SayHello_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKitPublicServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoKitPublic_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoKitPublicServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GoKitPublic_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoKitPublicServer).Auth(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoKitPublic_ServiceDesc is the grpc.ServiceDesc for GoKitPublic service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoKitPublic_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoKitPublic",
	HandlerType: (*GoKitPublicServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _GoKitPublic_SayHello_Handler,
		},
		{
			MethodName: "Auth",
			Handler:    _GoKitPublic_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gokit_public.proto",
}
